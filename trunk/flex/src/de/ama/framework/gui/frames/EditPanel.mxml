<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" styleName="EditPanel"  
	implements="de.ama.framework.gui.frames.Panel"
    initialize="init()" color="#202020" cornerRadius="4" borderColor="#909090"   
    borderStyle="none"  clipContent="false">

    <mx:Script><![CDATA[
        import de.ama.framework.command.Command;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.gui.fields.BoolField;
        import de.ama.framework.gui.fields.CommandButton;
        import de.ama.framework.gui.fields.DateField;
        import de.ama.framework.gui.fields.EditField;
        import de.ama.framework.gui.fields.ListField;
        import de.ama.framework.gui.fields.TextAreaField;
        import de.ama.framework.util.Util;

        import mx.controls.Button;
        import mx.core.UIComponent;

        private function init():void {
            addFields();
            addPanels();
            showTitle(label);
        }

        public  var gap:int = 5;
        public  var labelWidth:int = 100;
        private var _path:String;
        private var _generic:Boolean = false;
        private var _data:Data;


        public function set generic(value:Boolean):void {
            _generic = value;
        }

        public function get path():String {
            return _path;
        }

        public function set path(val:String):void {
            _path = val;
        }

        public function getData():Data {
            return _data;
        }


        public function setData(data:Data):void {
            _data = data;

            if (_generic) {
                createDefaultFields(_data);
            }

            var childs:Array = getChildren();
            var i:int;
            var len:int = childs.length;
            var f:EditField = null;
            var p:EditPanel = null;
            for (i = 0; i < len; i++) {
                if (childs[i] is EditField) {
                    f = childs[i];
                    f.setValue(data.getValue(f.localpath));
                } else if (childs[i] is EditPanel) {
                    p = childs[i];
                    p.setData(Data(data.getValue(p.path)));
                }
            }
        }

        public function showTitle(txt:String):void {
            if (Util.isEmpty(txt)) return;
            if (Util.isEqual(getStyle("borderStyle"), "none")) return;
            title.text = txt;
            titleBox.visible = true;
        }

        public function createDefaultFields(data:Data):void {
            if (Util.isEmpty(label)) {
                label = data.getName();
            }

            var classInfo:XML = describeType(data);
            for each (var v:XML in classInfo..variable) {
                var t:String = v.@type;
                switch (t) {
                    case "Number":
                    case "String": {
                        insertTextField(Util.firstCharToUpper(v.@name), v.@name);
                        break;
                    }
                    case "Boolean":{
                        insertBoolField(Util.firstCharToUpper(v.@name), v.@name);
                        break;
                    }
                    case "Date": {
                        insertDateField(Util.firstCharToUpper(v.@name), v.@name);
                        break;
                    }
                }
            }
        }

        public function insertTextField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = -1):EditField {
            var editField:EditField = new EditField(label, path);
            editField.labelWidth = lw < 0 ? labelWidth : lw;
            insertComponent(editField, x, y);
            return editField;
        }

        public function insertBoolField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = -1):BoolField {
            var boolField:BoolField = new BoolField(label, path);
            boolField.labelWidth = lw < 0 ? labelWidth : lw;
            insertComponent(boolField, x, y);
            return boolField;
        }

        public function insertDateField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = -1):DateField {
            var dateField:DateField = new DateField(label, path);
            dateField.labelWidth = lw < 0 ? labelWidth : lw;
            insertComponent(dateField, x, y);
            return dateField;
        }

        public function insertListField(label:String, path:String = null, lister:String = null, x:int = -1, y:int = -1, h:int = 150, lw:int = -1):ListField {
            var listField:ListField = new ListField(label, path, lister);
            listField.height = h;
            listField.labelWidth = lw < 0 ? labelWidth : lw;
            insertComponent(listField, x, y);
            return listField;
        }

        public function insertTextAreaField(label:String, path:String = null, x:int = -1, y:int = -1, h:int = 90, lw:int = -1):TextAreaField {
            var textAreaField:TextAreaField = new TextAreaField(label, path);
            textAreaField.height = h;
            textAreaField.labelWidth = lw < 0 ? labelWidth : lw;
            insertComponent(textAreaField, x, y);
            return textAreaField;
        }

        public function insertCommandButton(cmd:Command, x:int = -1, y:int = -1):Button {
            var button:CommandButton = new CommandButton();
            button.command = cmd;
            button.invoker = this;
            insertComponent(button, x, y);
            return button;
        }

        public function insertComponent(f:UIComponent, x:int = -1, y:int = -1):void {
            f.x = x > 0 ? x : 10;
            if (y < 0) {
                if (numChildren > 1) {
                    var c:DisplayObject = getChildAt(numChildren - 1);
                    y = c.y + c.height + gap;
                } else {
                    y = 20;
                }
            }
            f.y = y;
            addChild(f);

            height = f.y + f.height + gap + gap;
            width = Math.max(width, f.x + f.width + gap);
        }


        public function getEditField(path:String):EditField {
            var childs:Array = getChildren();
            var i:int;
            var len:int = childs.length;
            var f:EditField = null;
            for (i = 0; i < len; i++) {
                if (childs[i] is EditField) {
                    f = EditField(childs.getItemAt(i));
                    if (f.localpath == path) return f;
                }
            }
            return null;
        }


        public function endEditing():void {

        }


        public function startEditing():void {
            reset();
        }


        public function reset():void {
        }


        public function addPanels():void {
        }

        public function addFields():void {
        }


        public function getSelectionModel():SelectionModel {
            return new SelectionModel(getData());
        }

        ]]></mx:Script>

         <mx:Box id="titleBox" paddingLeft="3" paddingRight="3" y="-8" backgroundColor="#E0E0E0" borderStyle="solid" borderColor="#E0E0E0" cornerRadius="3" horizontalCenter="0" visible="false" height="16">
             <mx:Label  id="title" fontWeight="normal" fontSize="10" color="#808080" fontStyle="normal" textAlign="left"  text="xxx"/>
         </mx:Box>
</mx:Canvas>