<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
           xmlns:frames="de.ama.framework.gui.frames.*"
           implements="de.ama.framework.gui.frames.Panel,de.ama.framework.command.Invoker"
           width="100%" height="100%"
           initialize="init()"
           creationComplete="onCreationComplete()" borderStyle="inset" borderColor="#808080" cornerRadius="0">
    <mx:Script><![CDATA[
        import de.ama.framework.action.ActionStarter;
        import de.ama.framework.action.LoadTableAction;
        import de.ama.framework.command.Command;
        import de.ama.framework.command.CreateNodeCommand;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.gui.fields.CommandButton;
        import de.ama.framework.util.Callback;
        import de.ama.framework.util.Util;

        import mx.collections.ArrayCollection;
        import mx.controls.dataGridClasses.DataGridColumn;
        import mx.core.IDataRenderer;
        import mx.events.ListEvent;

        [Bindable]
        protected var rows:ArrayCollection = new ArrayCollection();

        public var commands:ArrayCollection = new ArrayCollection();
        public var listMenu:ContextMenu = new ContextMenu();

        public var generic:Boolean = false;

        public var toolbarSize:int = 0;
        public var toolbar:CommandButtonBar;

        public function init():void {
            addCollumns();
            addCommands();
            createToolbar();
        }


        public function onCreationComplete():void {

            listMenu.addEventListener(ContextMenuEvent.MENU_SELECT, contextMenuTriggered);
            listMenu.hideBuiltInItems();

        }

        private function onSelectionChange(event:ListEvent):void {
        }

        public function getSelectionModel():SelectionModel {
            var selectionModel:SelectionModel = new SelectionModel();
            var array:Array = grid.selectedItems;
            for each (var data:Data in array) {
                selectionModel.addSelection(data);
            }

            if (selectionModel == null) {
                selectionModel = new SelectionModel(createData());
            }
            return selectionModel;
        }

        public function refreshGui():void {
            rows.refresh();
        }


        /////////////////////////////////// Toolbar ///////////////////////////////////////////

        public function createToolbar():void {
            if (toolbarSize > 0) {
                toolbar = new CommandButtonBar();

                toolbar.size = toolbarSize;
                toolbar.label = label;
                toolbar.invoker = this;
                toolbar.commands = commands
                contentPanel.addChildAt(DisplayObject(toolbar), 0);
            }
        }

        public function addCommand(command:Command):void {
            commands.addItem(command);
        }

        /////////////////////////////////// ContextMenu ///////////////////////////////////////////


        public function contextMenuTriggered(event:ContextMenuEvent):void
        {
            var cmis:Array = new Array();
            var data:Data = null;

            if (event.mouseTarget is IDataRenderer) {
                data = Data(IDataRenderer(event.mouseTarget).data);
            }

            if (data != null) {
                grid.selectedItem = data;
            }

            for each(var command:Command in commands) {
                var cmi:ContextMenuItem = new ContextMenuItem(command.label);
                command.contextMenuItem = cmi;
                cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
                cmis.push(cmi);
            }

            listMenu.customItems = cmis;
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            for each(var command:Command in commands) {
                if (command.contextMenuItem == event.target) {
                    command.start(this);
                }
            }
        }


        /////////////////////////////////// Columns ///////////////////////////////////////////

        public function addCollumn(label:String, path:String, editable:Boolean, w:int = 100):void {
            var col:DataGridColumn = new DataGridColumn(label);
            col.dataField = path;
            col.editable = editable;
            col.width = w;
            var array:Array = grid.columns;
            array.push(col);
            grid.columns = array;
            if (editable) {
                grid.editable = true;
            }
        }

        public function createDefaultColumns(data:Data):void {
            var classInfo:XML = describeType(data);
            for each (var v:XML in classInfo..variable) {
                var type:String = v.@type;
                var name:String = v.@name;
                if (Util.isEqual(name, "oid")) continue;
                if (Util.isEqual(name, "version")) continue;
                switch (type) {
                    case "Date":
                    case "Boolean":
                    case "Number":
                    case "String": {
                        addCollumn(Util.firstCharToUpper(name), name, false);
                        break;
                    }
                }
            }
        }

        ///////////////////////////////////////////////// Data ///////////////////////////////////////////

        public function reload():void {
            var lta:LoadTableAction = new LoadTableAction();
            lta.data = createData();
            ActionStarter.instance.execute(lta, new Callback(this, loadTableHandler));
        }

        private function loadTableHandler(a:LoadTableAction):void {
            dataTable = a.data as Array;
        }

        public function get dataTable():Array {
            return rows.source;
        }

        public function set dataTable(array:Array):void {
            if (generic && array != null && array.length > 0) {
                createDefaultColumns(array[0]);
            }
            rows = new ArrayCollection(array);
        }

        public function addNewRow():void {
            var data:Data = createData();
            rows.addItem(data);
            grid.selectedItem = data;
        }

        public function copySelectedRow():void {
            if (grid.selectedIndex < 0 && grid.selectedItem == null) return;
            var data:Data = Data(grid.selectedItem).clone();
            rows.addItem(data);
            grid.selectedItem = data;
        }

        public function removeSelectedRow():void {
            if (grid.selectedIndex < 0 && grid.selectedItem == null) return;
            var newIndex:int = Math.max(grid.selectedIndex - 1, 0);
            var data:Data = Data(grid.selectedItem);
            rows.removeItemAt(rows.getItemIndex(data));
            grid.selectedIndex = newIndex;
        }

        public function getRowCount():int {
            if (rows == null) {
                return 0;
            }
            return rows.length;
        }

        public function setData(data:Data):void {
        }

        public function getData():Data {
            return null;
        }


        /////////////////////////////////// Overwrites ///////////////////////////////////////////

        public function createData():Data {
            return null;
        }

        public function addCollumns():void {
        }

        public function addCommands():void {
            addCommand(new CreateNodeCommand());
        }

        ]]></mx:Script>

    <mx:VBox id="contentPanel" width="100%" height="100%" paddingBottom="0" paddingRight="0" paddingLeft="0" paddingTop="0"
             verticalGap="0">

        <mx:DataGrid id="grid" dataProvider="{rows}"
        	      	change="onSelectionChange(event)" width="100%" height="100%"
        	      	contextMenu="{listMenu}" allowMultipleSelection="true"  borderStyle="solid" borderColor="#A0A0A0">
        </mx:DataGrid >

    </mx:VBox>

</mx:Canvas>