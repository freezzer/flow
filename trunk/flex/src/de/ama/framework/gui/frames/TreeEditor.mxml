<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas implements="de.ama.framework.command.Invoker"
           xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:frames="de.ama.framework.gui.frames.*"
           width="100%" height="100%"
	       initialize="init()"
           creationComplete="onCreationComplete()">

	<mx:Script><![CDATA[
        import de.ama.framework.command.Command;
        import de.ama.framework.command.LoadBoCommand;
        import de.ama.framework.command.SaveBoCommand;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.gui.icons.IconStore;

        import de.ama.framework.util.Callback;

        import de.ama.framework.util.Factory;

        import mx.controls.Button;
        import mx.controls.treeClasses.TreeItemRenderer;
        import mx.core.UITextField;

        public function init():void {
        }

        public function onCreationComplete():void {
            treeMenu.addEventListener(ContextMenuEvent.MENU_SELECT, contextMenuTriggered);
            treeMenu.hideBuiltInItems();

            buttonbar.addCommand(new SaveBoCommand());
            buttonbar.addCommand(new LoadBoCommand());
            buttonbar.callBack = new Callback(this, editorButtonHandler);

            toolbar.callBack = new Callback(this, toolBarButtonHandler);

            if (rootNode != null) {
                rootNode.openDefaultNodes();
            }
        }


        [Bindable]
        private var rootNode:TreeNode;

        [Bindable]
        public var selectedNode:TreeNode;

        [Bindable]
        public var treeMenu:ContextMenu = new ContextMenu();


        private function refreshToolBar():void {
            toolbar.clear();
            for each(var command:Command in selectedNode.commands) {
                toolbar.addCommand(command);
            }
        }

        public function treeChanged(event:Event):void {
            selectedNode = TreeNode(Tree(event.target).selectedItem);
            refreshToolBar();
            replaceEditPanel();
        }


        public function replaceEditPanel():void {
            var newPanel:EditPanel = Factory.createPanel(selectedNode.panelName);
            newPanel.reset();
            newPanel.setData(selectedNode.getData());

            var oldChild:EditPanel = getCurrentEditPanel();
            if (oldChild != null) {
                oldChild.endEditing();
                contenPanel.removeChild(oldChild);
            }

            contenPanel.addChild(newPanel);
            newPanel.startEditing();
        }

        public function getCurrentEditPanel():EditPanel {
            var children:Array = contenPanel.getChildren();
            if(children!=null && children.length>0){
                return EditPanel(children[0]);
            }
            return null;
        }

        /**
         * wird in Derivaten Ã¼berschrieben um die Baum Definition zu liefern
         * @return
         */
        public function getPrototypeTree():TreeNode {
            return null;
        }

        private function myIconFunction(item:Object):Class {
            var iconClass:Class;
            var iconName:String = item["iconName"];
            return IconStore.getIcon(iconName);
        }

        public function setData(data:Data):void {
            rootNode = getPrototypeTree();
            rootNode.setData(data);
        }


        public function getData():Data {
            return rootNode.getData();
        }


        public function contextMenuTriggered(event:ContextMenuEvent):void
        {
            if (event.mouseTarget is UITextField) {
                var tf:UITextField = UITextField(event.mouseTarget);
                var ir:TreeItemRenderer = TreeItemRenderer(tf.owner);
                var node:TreeNode = TreeNode(ir.data);
                myTree.selectedItem = node;
                var cmis:Array = new Array();
                for each(var command:Command in node.commands) {
                    var cmi:ContextMenuItem = new ContextMenuItem(command.label);
                    command.contextMenuItem = cmi;
                    cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
                    cmis.push(cmi);
                }
                treeMenu.customItems = cmis;
            }
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            var tf:UITextField = UITextField(event.mouseTarget);
            var ir:TreeItemRenderer = TreeItemRenderer(tf.owner);
            var node:TreeNode = TreeNode(ir.data);
            for each(var command:Command in node.commands) {
                if (command.contextMenuItem == event.target) {
                    command.newContext().selectionModel = new SelectionModel(node.data);
                    command.context.invoker = node;
                    command.start();
                }
            }

        }

        private function toolBarButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            if (selectedNode != null && selectedNode.parent != null) {
                command.newContext().selectionModel = new SelectionModel(selectedNode.data);
                command.context.invoker = selectedNode;
                command.start();
            }
        }

        private function editorButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            command.newContext().selectionModel = new SelectionModel(getData());
            command.context.invoker = this;
            command.start();
        }


        ]]></mx:Script>

    <mx:VBox width="100%" height="100%" paddingBottom="1" paddingRight="1" paddingLeft="1" paddingTop="2" verticalGap="0">
        <frames:CommandButtonBar id="toolbar" horizontalAlign="left" useLabels="false"/>

        <mx:HDividedBox color="0xffffff" width="100%" height="100%" paddingBottom="1" paddingRight="1" paddingLeft="1"
                        paddingTop="1" horizontalGap="8">

            <mx:Tree id="myTree" width="200" height="100%"  labelField="label" iconFunction="myIconFunction"
                     showRoot="true" dataProvider="{rootNode}" change="treeChanged(event)" contextMenu="{treeMenu}"/>
            
            <mx:Canvas width="600" height="100%" id="contenPanel" />


        </mx:HDividedBox>

        <frames:CommandButtonBar id="buttonbar" horizontalAlign="right" />
    </mx:VBox>
</mx:Canvas>
