<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	initialize="init()" implements="de.ama.framework.command.Invoker" creationComplete="expand()">
	<mx:Script><![CDATA[
        import de.ama.framework.command.Command;
        import de.ama.framework.command.LoadBoCommand;
        import de.ama.framework.command.SaveBoCommand;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.Data;
        import de.ama.framework.gui.icons.IconStore;

        import mx.collections.ArrayCollection;
        import mx.controls.Button;
        import mx.controls.treeClasses.TreeItemRenderer;
        import mx.core.UITextField;

        public function init():void {
            treeMenu.addEventListener(ContextMenuEvent.MENU_SELECT, contextMenuTriggered);
            treeMenu.hideBuiltInItems();

            editorCommands.addItem(new SaveBoCommand());
            editorCommands.addItem(new LoadBoCommand());
        }


        [Bindable]
        private var toolBarCommands:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var editorCommands:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var rootNode:TreeNode;

        [Bindable]
        public var selectedNode:TreeNode;

        [Bindable]
        public var treeMenu:ContextMenu = new ContextMenu();


        private function refreshToolBar():void {
            toolBarCommands.removeAll();
            for each(var command:Command in selectedNode.commands) {
                toolBarCommands.addItem(command);
            }
        }

        public function treeChanged(event:Event):void {
            selectedNode = TreeNode(Tree(event.target).selectedItem);
            refreshToolBar();
        }

        /**
         * wird in Derivaten Ã¼berschrieben um die Baum Definition zu liefern
         * @return
         */
        public function getPrototypeTree():TreeNode {
            return null;
        }

        private function myIconFunction(item:Object):Class {
            var iconClass:Class;
            var iconName:String = item["iconName"];
            return IconStore.getIcon(iconName);
        }

        public function expand():void {
        	if(rootNode==null) return;
        	if(rootNode.tree==null) return;
        	
        	rootNode.openDefaultNodes();
        }
        
        public function setData(data:Data):void {
            rootNode = getPrototypeTree();
            rootNode.setData(data);
        }


		

        public function getData():Data {
            return rootNode.getData();
        }


        public function contextMenuTriggered(event:ContextMenuEvent):void
        {
            if (event.mouseTarget is UITextField) {
                var tf:UITextField = UITextField(event.mouseTarget);
                var ir:TreeItemRenderer = TreeItemRenderer(tf.owner);
                var node:TreeNode = TreeNode(ir.data);
                myTree.selectedItem = node;
                var cmis:Array = new Array();
                for each(var command:Command in node.commands) {
                    var cmi:ContextMenuItem = new ContextMenuItem(command.label);
                    command.contextMenuItem = cmi;
                    cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
                    cmis.push(cmi);
                }
                treeMenu.customItems = cmis;
            }
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            var tf:UITextField = UITextField(event.mouseTarget);
            var ir:TreeItemRenderer = TreeItemRenderer(tf.owner);
            var node:TreeNode = TreeNode(ir.data);
            for each(var command:Command in node.commands) {
                if (command.contextMenuItem == event.target) {
                    command.newContext().selectionModel = new SelectionModel(node.data);
                    command.context.invoker = node;
                    command.start();
                }
            }

        }

        private function toolBarButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            if (selectedNode != null && selectedNode.parent != null) {
                command.newContext().selectionModel = new SelectionModel(selectedNode.data);
                command.context.invoker = selectedNode;
                command.start();
            }
        }

        private function editorButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            command.newContext().selectionModel = new SelectionModel(getData());
            command.context.invoker = this;
            command.start();
        }


        ]]></mx:Script>

    <mx:VBox width="100%" height="100%" paddingBottom="1" paddingRight="1" paddingLeft="1" paddingTop="4" verticalGap="0">
    <mx:HBox width="100%" height="30" horizontalAlign="left" horizontalGap="4" id="toolBar" verticalAlign="middle" paddingRight="5" paddingLeft="5">
        <mx:Repeater id="trp" dataProvider="{toolBarCommands}">
            <mx:Button label="{Command(trp.currentItem).label}" click="toolBarButtonHandler(event)" data="{trp.currentItem}"
                    icon="{Command(trp.currentItem).getIcon()}"   fontWeight="normal" textAlign="center"/>
        </mx:Repeater>
    </mx:HBox>
    <mx:HDividedBox color="0xffffff" width="100%" height="100%" paddingBottom="1" paddingRight="1" paddingLeft="1" paddingTop="1" horizontalGap="8">

            <mx:Tree id="myTree" width="20%" height="100%" 
            	labelField="label" iconFunction="myIconFunction"
                showRoot="true" dataProvider="{rootNode}" change="treeChanged(event)"
                contextMenu="{treeMenu}" />

            <mx:TextArea height="100%" width="80%"  text="Selected Item: {selectedNode}" color="#6F7884" backgroundAlpha="1.0" borderStyle="solid" cornerRadius="4" borderThickness="2"/>

    </mx:HDividedBox>
    <mx:HBox width="100%" height="30" horizontalAlign="right" horizontalGap="4" id="southPanel" verticalAlign="middle" paddingRight="5" paddingLeft="5">
        <mx:Repeater id="srp" dataProvider="{editorCommands}">
            <mx:Button label="{Command(srp.currentItem).label}" click="editorButtonHandler(event)" data="{srp.currentItem}"
                    icon="{Command(srp.currentItem).getIcon()}"   fontWeight="normal" textAlign="center"/>
        </mx:Repeater>
    </mx:HBox>
    </mx:VBox>
</mx:Canvas>
