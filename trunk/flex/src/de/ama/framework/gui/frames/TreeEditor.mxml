<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas implements="de.ama.framework.command.Invoker"
           xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:frames="de.ama.framework.gui.frames.*"
           width="100%" height="100%"
	       initialize="init()"
	       creationComplete="onCreationComplete()"
           >

	<mx:Script><![CDATA[
        import de.ama.framework.command.Command;
        import de.ama.framework.command.SaveBoCommand;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.gui.icons.IconStore;
        import de.ama.framework.util.Callback;
        import de.ama.framework.util.Factory;

        import mx.controls.Button;
        import mx.controls.treeClasses.TreeItemRenderer;
        import mx.core.UITextField;

        [Bindable]
        private var rootNode:TreeNode;

        [Bindable]
        public var treeMenu:ContextMenu = new ContextMenu();


        public function init():void {
        }

        public function onCreationComplete():void {
            treeMenu.addEventListener(ContextMenuEvent.MENU_SELECT, contextMenuTriggered);
            treeMenu.hideBuiltInItems();

            buttonbar._callBack = new Callback(this, editorButtonHandler);

            toolbar._callBack = new Callback(this, toolBarButtonHandler);

            addCommands();
        }

        public function addCommand(command:Command):void {
            buttonbar.addCommand(command);
        }

        private function refreshToolBar():void {
            toolbar.clear();
            for each(var command:Command in selectedNode.commands) {
                toolbar.addCommand(command);
            }
        }

        private function expandDefaultNodes():void {
            if (rootNode != null) {
                rootNode.tree = myTree;
                rootNode.openDefaultNodes();
                rootNode.select();
            }
        }

        public function get selectedNode():TreeNode {
            return TreeNode(myTree.selectedItem);
        }

        public function treeChanged(event:Event):void {
            refreshToolBar();

            if (selectedNode.isListView) {
                var lp:ListPanel = Factory.createLister(selectedNode.panelName);
                replaceCurrentPanel(lp);
                lp.dataTable = selectedNode.dataTable;
            } else {
                var ep:EditPanel = Factory.createPanel(selectedNode.panelName);
                replaceCurrentPanel(ep);
                ep.setData(selectedNode.getData());
            }

        }

        private function replaceCurrentPanel(newPanel:Panel):void {

            var oldPanel:Panel = getCurrentPanel();
            if (oldPanel != null) {
                if (oldPanel is EditPanel) {
                    EditPanel(oldPanel).endEditing();
                }

                contenPanel.removeChild(DisplayObject(oldPanel));

                if (newPanel is EditPanel) {
                    EditPanel(newPanel).startEditing();
                }
            }

            contenPanel.addChild(DisplayObject(newPanel));

        }

        public function getCurrentPanel():Panel {
            var children:Array = contenPanel.getChildren();
            if (children != null && children.length > 0) {
                return Panel(children[0]);
            }
            return null;
        }

        /**
         * wird in Derivaten Ã¼berschrieben um die Baum Definition zu liefern
         * @return
         */
        public function getPrototypeTree():TreeNode {
            return null;
        }

        private function myIconFunction(item:Object):Class {
            var iconClass:Class;
            var iconName:String = item["iconName"];
            return IconStore.getIcon(iconName);
        }

        public function setData(data:Data):void {
            if (data == null) {
                data = createData();
            }

            if (rootNode != null) {
                rootNode.tree = null;
            }

            rootNode = getPrototypeTree();
            rootNode.setData(data);

            label = rootNode.label;

            callLater(expandDefaultNodes);
        }


        public function getData():Data {
            return rootNode.getData();
        }

        public function getSelectionModel():SelectionModel {
            return new SelectionModel(getData());
        }


        public function contextMenuTriggered(event:ContextMenuEvent):void
        {
            if (event.mouseTarget is UITextField) {
                var tf:UITextField = UITextField(event.mouseTarget);
                var ir:TreeItemRenderer = TreeItemRenderer(tf.owner);
                var node:TreeNode = TreeNode(ir.data);
                myTree.selectedItem = node;
                var cmis:Array = new Array();
                for each(var command:Command in node.commands) {
                    var cmi:ContextMenuItem = new ContextMenuItem(command.label);
                    command.contextMenuItem = cmi;
                    cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
                    cmis.push(cmi);
                }
                treeMenu.customItems = cmis;
            }
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            var tf:UITextField = UITextField(event.mouseTarget);
            var ir:TreeItemRenderer = TreeItemRenderer(tf.owner);
            var node:TreeNode = TreeNode(ir.data);
            for each(var command:Command in node.commands) {
                if (command.contextMenuItem == event.target) {
                    command.start(node);
                }
            }

        }

        private function toolBarButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            if (selectedNode != null && selectedNode.parent != null) {
                command.start(selectedNode);
            }
        }

        private function editorButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            command.start(this);
        }


        /////////////////////////////////// Overwrites ///////////////////////////////////////////

        public function createData():Data {
            return null;
        }

        public function addCommands():void {
            addCommand(new SaveBoCommand());
        }


        ]]></mx:Script>

    <mx:VBox width="100%" height="100%" paddingBottom="0" paddingRight="0" paddingLeft="0" paddingTop="0" verticalGap="0" >
        <frames:CommandButtonBar id="toolbar" horizontalAlign="left" useLabels="false"/>

        <mx:HDividedBox color="0xffffff" width="100%" height="100%" paddingBottom="1" paddingRight="1" paddingLeft="1"
                        paddingTop="1" horizontalGap="8" backgroundColor="#F0F0F0" >

            <mx:Tree id="myTree" width="200" height="100%"  labelField="label" iconFunction="myIconFunction"
                     showRoot="true" dataProvider="{rootNode}"  change="treeChanged(event)" contextMenu="{treeMenu}"
                     />
            
            <mx:Canvas height="100%" id="contenPanel"  borderStyle="solid" borderThickness="2" cornerRadius="4"/>


        </mx:HDividedBox>

        <frames:CommandButtonBar id="buttonbar" horizontalAlign="right" useLabels="true" />
    </mx:VBox>
</mx:Canvas>
