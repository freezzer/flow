<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="200"
	xmlns:maps="com.google.maps.*"
	cornerRadius="6" borderStyle="solid" borderColor="#248ED8" >
  <mx:Script><![CDATA[
      import com.google.maps.InfoWindowOptions;
      import com.google.maps.LatLng;
      import com.google.maps.MapMouseEvent;
      import com.google.maps.controls.MapTypeControl;
      import com.google.maps.controls.ZoomControl;
      import com.google.maps.overlays.Marker;
      import com.google.maps.overlays.MarkerOptions;
      import com.google.maps.services.ClientGeocoder;
      import com.google.maps.services.GeocodingEvent;

      import de.ama.framework.gui.fields.EditField;
      import de.ama.framework.util.Callback;
      import de.ama.framework.util.Util;

      import mx.utils.StringUtil;

      public var silent:Boolean = true;
      public var adjusting:Boolean = false;

      private var _countryField:EditField;
      private var _cityField:EditField;
      private var _streetField:EditField;
      private var _zipField:EditField;

      public function set countryField(f:EditField):void {
          if (f == null) return;
          f.enterCallback = new Callback(this, readEditFields);
          _countryField = f;
      }

      public function set cityField(f:EditField):void {
          if (f == null) return;
          f.enterCallback = new Callback(this, readEditFields);
          _cityField = f;
      }

      public function set streetField(f:EditField):void {
          if (f == null) return;
          f.enterCallback = new Callback(this, readEditFields);
          _streetField = f;
      }

      public function set zipField(f:EditField):void {
          if (f == null) return;
          f.enterCallback = new Callback(this, readEditFields);
          _zipField = f;

      }

      public static function create(x :int, y:int, w:int, h:int):GoogleMap {
          var map:GoogleMap = new GoogleMap();
          map = new GoogleMap();
          map.x = x;
          map.y = y;
          map.height = h;
          map.width = w;
          return map;
      }

      public function readEditFields(f:EditField):void {

          if(f==_countryField){
              if(_zipField!=null) _zipField.setInputText("");
              if(_streetField!=null) _streetField.setInputText("");
              if(_cityField!=null) _cityField.setInputText("");
              map.setZoom(5);
          }

          if(f==_zipField){
              if(_cityField!=null) _cityField.setInputText("");
              if(_streetField!=null) _streetField.setInputText("");
              map.setZoom(15);
          }

          if(f==_cityField){
              map.setZoom(11);
              if(_zipField!=null) _zipField.setInputText("");
              if(_streetField!=null) _streetField.setInputText("");
          }

          if(f==_streetField){
              map.setZoom(17);
          }


          doGeocode(null);
      }


      private function onMapReady(event:Event):void {
          map.enableScrollWheelZoom();
          map.enableContinuousZoom();
          map.addControl(new ZoomControl());
          map.addControl(new MapTypeControl());
          map.addEventListener(MapMouseEvent.CLICK, onMapClick);
      }

      private function onMapClick(event:MapMouseEvent):void {
          doGeocode(event.latLng);
      }

      private function interpretCity(str:String):void {
          if(Util.isEmpty(str)) return;
          var split:Array = StringUtil.trim(str).split(" ");
          if (split.length == 2) {
              _zipField.setInputText(split[0]);
              _cityField.setInputText(split[1]);
          } else {
              _cityField.setInputText(str);
          }
      }

      private function doGeocode(latlng:LatLng = null):void {
          if (adjusting) return;

          adjusting = true;


          try {
              var geocoder:ClientGeocoder = new ClientGeocoder();
              geocoder.addEventListener(
                      GeocodingEvent.GEOCODING_SUCCESS,
                      function(event:GeocodingEvent):void {
                          var placemarks:Array = event.response.placemarks;
                          if (placemarks.length > 0) {
                              map.clearOverlays();
                              map.setCenter(placemarks[0].point);
                              var marker:Marker = new Marker(placemarks[0].point, new MarkerOptions({draggable: true}));

                              if (placemarks[0].address != null) {
                                  var address:String = placemarks[0].address;
                                  var arr:Array = address.split(",");

                                  if (arr.length == 1) {
                                      _countryField.setInputText(arr[0]);
                                  }

                                  if (arr.length == 2) {
                                      interpretCity(arr[0]);
                                      _countryField.setInputText(arr[1]);
                                  }

                                  if (arr.length == 3) {
                                      _streetField.setInputText(arr[0]);
                                      interpretCity(arr[1]);
                                      _countryField.setInputText(arr[2]);
                                  }
                              }

                              marker.addEventListener(MapMouseEvent.CLICK, function (event:MapMouseEvent):void {
                                  marker.openInfoWindow(new InfoWindowOptions({content: placemarks[0].address}));
                              });

                              marker.addEventListener(MapMouseEvent.DRAG_END, function(event:Event):void {
                                  geocoder.reverseGeocode(marker.getLatLng());
                              });

                              map.addOverlay(marker);
                          }
                      }
                      );

              geocoder.addEventListener(
                      GeocodingEvent.GEOCODING_FAILURE,
                      function(event:GeocodingEvent):void {
                          if (!silent) {
                              Util.showMessage("Dieser Ort ist nicht verzeichnet");
                          }
                      }
                      );


              if (latlng != null) {

                  geocoder.reverseGeocode(latlng);

              } else {
                  var addr:String = "Deutschland";
                  if (_countryField != null && !_countryField.isEmpty()) {
                      addr = _countryField.getInputText();
                  }
                  if (_streetField != null && !_streetField.isEmpty()) {
                      addr += "," + _streetField.getInputText();
                  }
                  if (_cityField != null && !_cityField.isEmpty()) {
                      addr += "," + _cityField.getInputText();
                  } else
                  if (_zipField != null && !_zipField.isEmpty()) {
                      addr += "," + _zipField.getInputText();
                  }
                  geocoder.geocode(addr);
              }
          } finally {
              adjusting = false;
          }

      }




      ]]></mx:Script>
  


    <maps:Map id="map"  key="ABQIAAAAK7AsHxY1HCEEhqzGfPOq4RQNBUbHWORdu9BffY4TAGVewGMWjBQEc7BLYXOpOkze1XGxFxU9NFB8aA" 
        mapevent_mapready="onMapReady(event)" width="100%" height="100%" language="de"/>

</mx:Canvas>