<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
           xmlns:frames="de.ama.framework.gui.frames.*"
           implements="de.ama.framework.gui.frames.Panel,de.ama.framework.command.Invoker"
           	top="0" bottom="0" left="0" right="0"
           initialize="init()"
           creationComplete="onCreationComplete()">
    <mx:Script><![CDATA[
        import de.ama.framework.action.ActionStarter;
        import de.ama.framework.action.LoadTableAction;
        import de.ama.framework.command.Command;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.util.Callback;

        import mx.collections.ArrayCollection;
        import mx.controls.Button;
        import mx.controls.dataGridClasses.DataGridColumn;
        import mx.events.ListEvent;

        [Bindable]
        protected var _dataTable:Array;

        public var commands:ArrayCollection = new ArrayCollection();
        public var listMenu:ContextMenu = new ContextMenu();

        public var generic:Boolean;
        public var useToolbar:Boolean;
        public var toolbar:CommandButtonBar;

        private var selectionModel:SelectionModel;


        public function init():void {
            createToolbar();
            addBehavior();
        }

        public function onCreationComplete():void {
            //            treeMenu.addEventListener(ContextMenuEvent.MENU_SELECT, contextMenuTriggered);
            //            treeMenu.hideBuiltInItems();
            //
            //            toolbar.callBack = new Callback(this, toolBarButtonHandler);
        }


        private function onSelectionChange(event:ListEvent):void {
            selectionModel = new SelectionModel();
            var array:Array = grid.selectedItems;
            for each (var data:Data in array) {
                selectionModel.addSelection(data);
            }
        }


        public function reload():void {
            var lta:LoadTableAction = new LoadTableAction();
            lta.data = createData();
            ActionStarter.instance.execute(lta, new Callback(this, loadTableHandler));
        }

        private function loadTableHandler(a:LoadTableAction):void {
            _dataTable = a.data as Array;
        }

        public function get dataTable():Array {
            return _dataTable;
        }

        public function set dataTable(value:Array):void {
            _dataTable = value;
        }


        /////////////////////////////////// Toolbar ///////////////////////////////////////////

        public function createToolbar():void {
            if (! useToolbar) return;
            toolbar = new CommandButtonBar();
            toolbar.useLabels = false;
            toolbar.setStyle("horizontalAlign", "left")
            toolbar.callBack = new Callback(this, toolBarButtonHandler);
            contentPanel.addChildAt(toolbar, 0);
        }

        public function addToolbarCommand(command:Command):void {
            if (! useToolbar) return;
            toolbar.addCommand(command);
        }

        private function toolBarButtonHandler(event:MouseEvent):void {
            var button:Button = Button(event.currentTarget);
            var command:Command = Command(button.data);
            if (selectionModel != null) {
                command.selectionModel = selectionModel
                command.invoker = this;
                command.start();
            }

        }

        /////////////////////////////////// Columns ///////////////////////////////////////////

        public function addCollumn(label:String, path:String):void {
            var col:DataGridColumn = new DataGridColumn(label);
            col.dataField = path;
            var array:Array = grid.columns;
            array.push(col);
            grid.columns = array;
        }


        public function setData(data:Data):void {
        }

        public function getData():Data {
            return null;
        }

        public function getSelectionModel():SelectionModel {
            if (selectionModel == null) {
                selectionModel = new SelectionModel(createData());
            }
            return selectionModel;
        }

        /////////////////////////////////// Overwrites ///////////////////////////////////////////

        public function createData():Data {
            return null;
        }

        public function addBehavior():void {
            // children write here
        }

        ]]></mx:Script>

    <mx:VBox id="contentPanel" width="100%" height="100%" paddingBottom="0" paddingRight="0" paddingLeft="0" paddingTop="0"
             verticalGap="0">

        <mx:DataGrid id="grid" dataProvider="{_dataTable}" 
        	      	change="onSelectionChange(event)" width="100%" height="100%"
        	      	contextMenu="{listMenu}" allowMultipleSelection="true">
        </mx:DataGrid >

    </mx:VBox>

</mx:Canvas>