<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" styleName="EditPanel"  
	implements="de.ama.framework.gui.frames.Panel, de.ama.framework.gui.fields.GUIComponent "
    initialize="init()" color="#202020" cornerRadius="4" borderColor="#909090"
    borderStyle="none"  clipContent="false" click="onClick(event)">

    <mx:Script><![CDATA[
        import de.ama.framework.command.Command;
        import de.ama.framework.data.BusinessObject;
        import de.ama.framework.data.SelectionModel;
        import de.ama.framework.gui.fields.BoolField;
        import de.ama.framework.gui.fields.CommandButton;
        import de.ama.framework.gui.fields.DateField;
        import de.ama.framework.gui.fields.EditField;
        import de.ama.framework.gui.fields.GUIComponent;
        import de.ama.framework.gui.fields.ListField;
        import de.ama.framework.gui.fields.ProxyField;
        import de.ama.framework.gui.fields.RichTextEditorField;
        import de.ama.framework.gui.fields.TextAreaField;
        import de.ama.framework.util.Util;

        import de.ama.services.Environment;

        import mx.controls.Button;
        import mx.core.UIComponent;

        private function init():void {
            addFields();
            addPanels();
            showTitle(label);

            super.addEventListener(MouseEvent.MOUSE_DOWN, startDragging);
            super.addEventListener(MouseEvent.MOUSE_UP, stopDragging);

        }

        public  var gap:int = 5;
        public  var _fieldLabelWidth:int = 100;
        public  var _fieldInputWidth:int = 300;
        private var _path:String;
        private var _generic:Boolean = false;
        private var _data:BusinessObject;


        public function set generic(value:Boolean):void {
            _generic = value;
        }


        override public function set label(value:String):void {
            setStyle("borderStyle", "solid");
            super.label = value;
        }

        public function get path():String {
            return _path;
        }

        public function set path(val:String):void {
            _path = val;
        }

        public function getData():BusinessObject {
            return _data;
        }


        public function setData(data:BusinessObject):void {
            _data = data;

            if (_generic) {
                createDefaultFields(_data);
                label = _data.getName();
                x = 25;
                y = 25;
            }

            var childs:Array = getChildren();
            var i:int;
            var len:int = childs.length;
            var f:EditField = null;
            var p:EditPanel = null;
            for (i = 0; i < len; i++) {
                if (childs[i] is EditField) {
                    f = childs[i];
                    f.setValue(data.getValue(f.localpath));
                    f.initDefaultValue();
                } else if (childs[i] is EditPanel) {
                    p = childs[i];
                    p.setData(BusinessObject(data.getValue(p.path)));
                }
            }
        }

        public function showTitle(txt:String):void {
            if (Util.isEmpty(txt)) return;
            if (Util.isEqual(getStyle("borderStyle"), "none")) return;
            title.text = txt;
            titleBox.visible = true;
        }

        public function createDefaultFields(data:BusinessObject):void {
            if (Util.isEmpty(label)) {
                label = data.getName();
            }

            var classInfo:XML = describeType(data);
            for each (var v:XML in classInfo..variable) {
                var t:String = v.@type;
                switch (t) {
                    case "Number":
                    case "String": {
                        insertTextField(Util.firstCharToUpper(v.@name), v.@name);
                        break;
                    }
                    case "Boolean":{
                        insertBoolField(Util.firstCharToUpper(v.@name), v.@name);
                        break;
                    }
                    case "Date": {
                        insertDateField(Util.firstCharToUpper(v.@name), v.@name);
                        break;
                    }
                }
            }
        }

        public function insertTextField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = -1, w:int = -1, defaultString:String = null):EditField {
            var editField:EditField = new EditField(label, path);
            editField.labelWidth = lw < 0 ? _fieldLabelWidth : lw;
            editField.width = w < 0 ? _fieldInputWidth : w;
            insertComponent(editField, x, y);
            if (!Util.isEmpty(defaultString)) {
                editField.defaultValue = defaultString;
            }
            return editField;
        }

        public function insertBoolField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = -1, w:int = -1):BoolField {
            var boolField:BoolField = new BoolField(label, path);
            boolField.labelWidth = lw < 0 ? _fieldLabelWidth : lw;
            boolField.width = w < 0 ? _fieldInputWidth : w;
            insertComponent(boolField, x, y);
            return boolField;
        }

        public function insertDateField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = -1, w:int = -1):DateField {
            var dateField:DateField = new DateField(label, path);
            dateField.labelWidth = lw < 0 ? _fieldLabelWidth : lw;
            dateField.width = w < 0 ? _fieldInputWidth : w;
            insertComponent(dateField, x, y);
            return dateField;
        }

        public function insertListField(label:String, path:String = null, lister:String = null, x:int = -1, y:int = -1, w:int = -1, h:int = 150):ListField {
            var listField:ListField = new ListField(label, path, lister);
            listField.height = h;
            listField.width = w < 0 ? _fieldInputWidth : w;
            insertComponent(listField, x, y);
            return listField;
        }

        public function insertTextAreaField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = 90, w:int = -1, h:int = 75):TextAreaField {
            var textAreaField:TextAreaField = new TextAreaField(label, path);
            textAreaField.height = h;
            textAreaField.labelWidth = lw < 0 ? _fieldLabelWidth : lw;
            textAreaField.width = w < 0 ? _fieldInputWidth : w;
            insertComponent(textAreaField, x, y);
            return textAreaField;
        }

        public function insertRichTextEditorField(label:String, path:String = null, x:int = -1, y:int = -1, lw:int = 90, w:int = -1, h:int = 75):RichTextEditorField {
            var editor:RichTextEditorField = new RichTextEditorField(label, path);
            editor.height = h;
            editor.labelWidth = lw < 0 ? _fieldLabelWidth : lw;
            editor.width = w < 0 ? _fieldInputWidth : w;
            insertComponent(editor, x, y);
            return editor;
        }

        public function insertProxyField(type:String, guiRepPath:String, label:String, path:String = null, x:int = -1, y:int = -1, lw:int = 90, w:int = -1):ProxyField {
            var proxyField:ProxyField = new ProxyField(label, path);
            proxyField.labelWidth = lw < 0 ? _fieldLabelWidth : lw;
            proxyField.width = w < 0 ? _fieldInputWidth : w;
            proxyField.guiRepPath = guiRepPath;
            proxyField.type = type;
            insertComponent(proxyField, x, y);
            return proxyField;
        }

        public function insertCommandButton(cmd:Command, x:int = -1, y:int = -1, w:int = 100):Button {
            var button:CommandButton = new CommandButton();
            button.command = cmd;
            button.width = w;
            button.invoker = this;
            insertComponent(button, x, y);
            return button;
        }

        public function insertComponent(f:UIComponent, x:int = -1, y:int = -1):void {
            f.x = x > 0 ? x : 10;
            if (y < 0) {
                if (numChildren > 1) {
                    var c:DisplayObject = getChildAt(numChildren - 1);
                    y = c.y + c.height + gap;
                } else {
                    y = 20;
                }
            }
            f.y = y;
            addChild(f);

            height = Math.max(height, f.y + f.height + gap + gap);
            width = Math.max(width, f.x + f.width + gap);
        }


        public function getEditField(path:String):EditField {
            var f:EditField = null;
            var len:int = numChildren;
            for (var i:int = 0; i < len; i++) {
                if (getChildAt(i) is EditField) {
                    f = EditField(getChildAt(i));
                    if (f.localpath == path) return f;
                }
            }
            return null;
        }


        public function getAllGUIComponents(c:Class = null):Array {
            if(c==null) c=GUIComponent;
            var ret:Array = new Array();
            var len:int = numChildren;
            for (var i:int = 0; i < len; i++) {
                if (getChildAt(i) is c) {
                    ret.push(getChildAt(i));
                }
            }
            return ret;
        }

        public function endEditing():void {

        }


        public function startEditing():void {
            reset();
        }


        public function reset():void {
        }


        public function addPanels():void {
        }

        public function addFields():void {
        }


        public function getSelectionModel():SelectionModel {
            return new SelectionModel(getData());
        }

        ///////////////////////////// design mode ////////////////////////////////////////

        private function startDragging(event:MouseEvent):void {
            if (Environment.designer && event.target == this) {
                super.startDrag();
            }
        }

        private function stopDragging(event:MouseEvent):void {
            if (Environment.designer && event.target == this) {
                super.stopDrag();
            }
        }

        private function onClick(event:MouseEvent):void {
            if (Environment.designer && event.eventPhase == EventPhase.AT_TARGET) {
                Environment.designer.setPanel(this);
            }
        }


        public function getSourceCode(xml:Boolean):String {
            var border:String = Util.isEqual("none", getStyle("borderStyle")) ? "false" : "true";
            if (xml) {
                return "<panel name=\"" + Util.getUnqualifiedClassName(this) + "\" label=\"" + label +
                       "\" border=\"" + border + "\" x=\"" + x + "\" y=\"" + y +
                       "\" w=\"" + width + "\" h=\"" + height + "\" path=\"" + Util.saveToString(path, ".") + "\" >"
            } else {
                return "EditPanel " + _path + "x=" + x + ",y=" + y;
            }
        }

        // GuiComponent
        public function set labelWidth(val:int):void {     }
        public function get labelWidth():int {  return 0;   }


        ]]></mx:Script>

         <mx:Box id="titleBox" paddingLeft="3" paddingRight="3" y="-8" backgroundColor="#E0E0E0" borderStyle="solid" borderColor="#E0E0E0" cornerRadius="3" horizontalCenter="0" visible="false" height="16">
             <mx:Label  id="title" fontWeight="normal" fontSize="10" color="#808080" fontStyle="normal" textAlign="left"  text="xxx"/>
         </mx:Box>
</mx:Canvas>